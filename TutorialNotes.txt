
Tutorial link: https://www.youtube.com/watch?v=UmljXZIypDc&list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p

pip installs
$ pip install django
$ pip install django-crispy-forms


Check django version
$ python -m django --version

Start a new project
$ django-admin startproject django_project

Run server
$ python manage.py runserver

Create a new app
$ python manage.py startapp blog

Create a new admin user (need to create database for this to work)
$ python manage.py createsuperuser
  > adam
  > adam_289@hotmail.com
  > Testing321

  Added users in admin panel:
  > TestUser
  > Testing321


Make migrations - prepares django to update the database
$ python manage.py makemigrations

Apply migrations - updates the database
$ python manage.py migrate

# Show the SQL migration command generated by django for the database being used (sqlite for this app)
$ python manage.py sqlmigrate blog 0001

Run the django shell
$ python manage.py shell

Using the shell to send database commands
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()
>>> User.objects.first()
>>> User.objects.filter(username='adam')
>>> user = User.objects.filter(username='adam').first()
>>> user  # show the user object
>>> user.id  # show the user id
>>> user.pk  # show the user pk
>>> user = User.objects.get(id=1)
>>> Post.objects.all()
>>> post_1 = Post(title='Blog 1', content='First Post Content!', author=user)
>>> Post.objects.all()  # Still empty because we haven't updated the database
>>> post_1.save()  # Save the post to the database
>>> Post.objects.all()  # The added blog will show up now
>>> post_2 = Post(title='Blog 2', content='Second Post Content!', author_id=user.id)
>>> post_2.save()
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>
>>> post = Post.objects.first()
>>> post.content
'First Post Content!'
>>> post.date_posted
datetime.datetime(2020, 3, 13, 14, 24, 48, 68499, tzinfo=<UTC>)
>>> post.author
<User: adam>
>>> post.author.email
'adam_289@hotmail.com'

# Get all of the posts that were written by a user
>>> user
<User: adam>
>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x041F48F0>
>>> user.post_set.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

# Create a post through the user - no requirement to run .save(), it is done automatically
>>> user.post_set.create(title='Blog 3', content='Third Post Content!')
<Post: Blog 3>
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>]>
>>> exit()

### Video 8
(venv) C:\Users\Adam\PycharmProjects\DjangoTutorial\django_project>python manage.py shell
Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.contrib.auth.models import User
>>> user = User.objects.filter(username='adam').first()
>>> user
<User: adam>
>>> user.profile
<Profile: adam Profile>
>>> user.profile.image
<ImageFieldFile: profile_images/Ninja_Bubbles.jpg>
>>> user.profile.image.width
128
>>> user.profile.image.height
128
>>> user.profile.image.size
18305
>>> user.profile.image.url
'profile_images/Ninja_Bubbles.jpg'
>>> user2 = User.objects.filter(username='TestUser').first()
>>> user2
<User: TestUser>
>>> user2.profile.image
<ImageFieldFile: default.jpg>
>>> exit()


### Video 11 - Pagination
$ python manage.py shell
>>> import json
>>> from blog.models import Post
>>> for post in posts_json:
...     post = Post(title=post['title'], content=post['content'], author_id=post['user_id'])
...     post.save()
...
>>>
>>> from django.core.paginator import Paginator
>>> posts = ['1', '2', '3', '4', '5']
>>> p = Paginator(posts, 2)
>>> p.num_pages
3

>>> for page in p.page_range:
...     print(page)
...
1
2
3

>>> p1 = p.page(1)
>>> p1
<Page 1 of 3>

>>> p1.number
1

>>> p1.object_list
['1', '2']

>>> p1.has_previous()
False

>>> p1.has_next()
True

>>> p1.next_page_number()
2
>>>